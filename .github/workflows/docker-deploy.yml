name: Deploy to Docker Hub

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME_PREFIX: ${{ secrets.DOCKER_USERNAME }}/f1onboard

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata for live service
      id: meta-live
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-live
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for api service
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend service
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push live service
      uses: docker/build-push-action@v5
      with:
        context: .
        target: live
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-live.outputs.tags }}
        labels: ${{ steps.meta-live.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push api service
      uses: docker/build-push-action@v5
      with:
        context: .
        target: api
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend service
      uses: docker/build-push-action@v5
      with:
        context: ./dash
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          NEXT_PUBLIC_LIVE_SOCKET_URL=${{ env.NEXT_PUBLIC_LIVE_SOCKET_URL }}
          NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }}
          TAG=latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-compose:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create production docker-compose.yml
      run: |
        cat > docker-compose.prod.yml << EOF
        services:
          live:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-live:latest
            restart: always
            ports:
              - 4000:4000
            environment:
              - LIVE_BACKEND_ADDRESS=0.0.0.0:4000
              - ORIGIN=${{ env.ORIGIN }}
              - RUST_LOG=live=trace

          api:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-api:latest
            restart: always
            ports:
              - 4001:4001
            environment:
              - API_BACKEND_ADDRESS=0.0.0.0:4001
              - RUST_LOG=api=debug

          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-frontend:latest
            restart: always
            ports:
              - 3000:3000
            depends_on:
              - api
              - live
            environment:
              - NEXT_PUBLIC_LIVE_SOCKET_URL=${{ secrets.NEXT_PUBLIC_LIVE_SOCKET_URL }}
              - NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        EOF
        
    - name: Upload docker-compose.prod.yml as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-production
        path: docker-compose.prod.yml
        retention-days: 30
